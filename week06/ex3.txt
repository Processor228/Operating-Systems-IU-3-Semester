Well, SJF is basically FCFS, but with one additional feature that process
with minimal burst time among those sorted by arrival time is taken.

As per measurements, classical FCFS demonstrates:
process 0:       process 1:      process 2:     process 3:
        at=5           at=7         at=20           at=3
        bt=2           bt=6         bt=3            bt=8
        ct=17         ct=23         ct=32           ct=14
        wt=10         wt=10         wt=9            wt=3
        tat=12        tat=16        tat=12          tat=11
        rt=10         rt=10         rt=9            rt=3

process 4:          process 5:      process 6:
        at=2            at=3            at=10
        bt=4            bt=1            bt=6
        ct=6            ct=15           ct=29
        wt=0            wt=11           wt=13
        tat=4           tat=12          tat=19
        rt=0            rt=11           rt=13

data size = 7
Average results for this run:
        avg_wt=8.000000
        avg_tat=12.285714

In, opposite, SFJ:
process 0:
        at=5
        bt=2
        ct=9
        wt=2
        tat=4
        rt=2
process 1:
        at=7
        bt=6
        ct=15
        wt=2
        tat=8
        rt=2
process 2:
        at=20
        bt=3
        ct=24
        wt=1
        tat=4
        rt=1
process 3:
        at=3
        bt=8
        ct=32
        wt=21
        tat=29
        rt=21
process 4:
        at=2
        bt=4
        ct=6
        wt=0
        tat=4
        rt=0
process 5:
        at=3
        bt=1
        ct=7
        wt=3
        tat=4
        rt=3
process 6:
        at=10
        bt=6
        ct=21
        wt=5
        tat=11
        rt=5
data size = 7
Average results for this run:
        avg_wt=4.857143
        avg_tat=9.142858

So we see that average waiting time dropped, and average turnaround time also decreased,
thus we may say that on such process data SJF is, on average, more optimal.

